{"ast":null,"code":"// App State\nexport class AdminState {\n  constructor() {\n    this.allCompanies = [];\n    this.company = {\n      id: 0,\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      coupons: undefined\n    };\n    this.allCustomers = [];\n    this.customer = {\n      id: -1,\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\"\n    };\n  }\n}\nexport let AdminActionType = /*#__PURE__*/function (AdminActionType) {\n  AdminActionType[\"addCompany\"] = \"addCompany\";\n  AdminActionType[\"addCustomer\"] = \"addCustomer\";\n  AdminActionType[\"getAllCompanies\"] = \"getCompanies\";\n  AdminActionType[\"getAllCustomers\"] = \"getCustomers\";\n  AdminActionType[\"deleteCompany\"] = \"deleteCompany\";\n  AdminActionType[\"deleteCustomer\"] = \"deleteCustomer\";\n  AdminActionType[\"updateCompany\"] = \"updateCompany\";\n  AdminActionType[\"updateCustomer\"] = \"updateCustomer\";\n  AdminActionType[\"singleCompany\"] = \"singleCompany\";\n  AdminActionType[\"singleCustomer\"] = \"singleCustomer\";\n  return AdminActionType;\n}({});\nexport function addCompanyAction(newCompany) {\n  return {\n    type: AdminActionType.addCompany,\n    payload: newCompany\n  };\n}\nexport function addCustomerAction(newCustomer) {\n  return {\n    type: AdminActionType.addCustomer,\n    payload: newCustomer\n  };\n}\nexport function deleteCompanyAction(id) {\n  return {\n    type: AdminActionType.deleteCompany,\n    payload: id\n  };\n}\nexport function deleteCustomerAction(id) {\n  return {\n    type: AdminActionType.deleteCustomer,\n    payload: id\n  };\n}\nexport function getAllCompaniesAction(companies) {\n  return {\n    type: AdminActionType.getAllCompanies,\n    payload: companies\n  };\n}\nexport function getAllCustomersAction(customers) {\n  return {\n    type: AdminActionType.getAllCustomers,\n    payload: customers\n  };\n}\nexport function updateCompanyAction(company) {\n  return {\n    type: AdminActionType.updateCompany,\n    payload: company\n  };\n}\nexport function updateCustomerAction(customer) {\n  return {\n    type: AdminActionType.updateCustomer,\n    payload: customer\n  };\n}\nexport function getSingleComapnyAction(company) {\n  return {\n    type: AdminActionType.singleCompany,\n    payload: company\n  };\n}\nexport function getSingleCustomerAction(customer) {\n  return {\n    type: AdminActionType.singleCustomer,\n    payload: customer\n  };\n}\nexport function AdminReducer(currentState = new AdminState(), action) {\n  const newState = {\n    ...currentState\n  };\n  switch (action.type) {\n    case AdminActionType.addCompany:\n      newState.allCompanies = [...newState.allCompanies, action.payload];\n      break;\n    case AdminActionType.addCustomer:\n      newState.allCustomers = [...newState.allCustomers, action.payload];\n      break;\n    case AdminActionType.deleteCompany:\n      newState.allCompanies = [...newState.allCompanies].filter(item => item.id !== action.payload);\n      break;\n    case AdminActionType.deleteCustomer:\n      newState.allCustomers = [...newState.allCustomers].filter(item => item.id !== action.payload);\n      break;\n    case AdminActionType.updateCompany:\n      newState.allCompanies = newState.allCompanies.map(company => company.id === action.payload.id ? {\n        ...company,\n        ...action.payload\n      } : company);\n      break;\n    case AdminActionType.updateCustomer:\n      newState.allCustomers = [...newState.allCustomers].filter(item => item.id !== action.payload);\n      newState.allCustomers = [...newState.allCustomers, action.payload];\n      break;\n    case AdminActionType.getAllCompanies:\n      newState.allCompanies = action.payload;\n      break;\n    case AdminActionType.getAllCustomers:\n      newState.allCustomers = action.payload;\n      break;\n    case AdminActionType.singleCompany:\n      newState.company = action.payload;\n      break;\n    case AdminActionType.singleCustomer:\n      newState.customer = action.payload;\n      break;\n  }\n  return newState;\n}\n_c = AdminReducer;\nvar _c;\n$RefreshReg$(_c, \"AdminReducer\");","map":{"version":3,"names":["AdminState","constructor","allCompanies","company","id","name","email","password","coupons","undefined","allCustomers","customer","firstName","lastName","AdminActionType","addCompanyAction","newCompany","type","addCompany","payload","addCustomerAction","newCustomer","addCustomer","deleteCompanyAction","deleteCompany","deleteCustomerAction","deleteCustomer","getAllCompaniesAction","companies","getAllCompanies","getAllCustomersAction","customers","getAllCustomers","updateCompanyAction","updateCompany","updateCustomerAction","updateCustomer","getSingleComapnyAction","singleCompany","getSingleCustomerAction","singleCustomer","AdminReducer","currentState","action","newState","filter","item","map","_c","$RefreshReg$"],"sources":["C:/Users/orime/IdeaProjects/Project_Ori_Meir/Frontend/src/redux/AdminReducer.ts"],"sourcesContent":["import { Company } from \"../Components/Models/Company\";\nimport { Customer } from \"../Components/Models/Customer\";\n\n// App State\nexport class AdminState {\n    public allCompanies: Company[] = [];\n    public company: Company = {\n        id: 0,\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        coupons: undefined\n    }\n    public allCustomers: Customer[] = [];\n\n    public customer: Customer = {\n        id: -1,\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\"\n    }\n}\n\n\nexport enum AdminActionType {\n    addCompany = \"addCompany\",\n    addCustomer = \"addCustomer\",\n    getAllCompanies = \"getCompanies\",\n    getAllCustomers = \"getCustomers\",\n    deleteCompany = \"deleteCompany\",\n    deleteCustomer = \"deleteCustomer\",\n    updateCompany = \"updateCompany\",\n    updateCustomer = \"updateCustomer\",\n    singleCompany = \"singleCompany\",\n    singleCustomer = \"singleCustomer\",\n}\n\nexport interface AdminAction {\n    type: AdminActionType,\n    payload?: any\n}\n\nexport function addCompanyAction(newCompany: Company): AdminAction {\n    return { type: AdminActionType.addCompany, payload: newCompany };\n}\n\nexport function addCustomerAction(newCustomer: Customer): AdminAction {\n    return { type: AdminActionType.addCustomer, payload: newCustomer };\n}\n\nexport function deleteCompanyAction(id: number): AdminAction {\n    return { type: AdminActionType.deleteCompany, payload: id };\n}\n\nexport function deleteCustomerAction(id: number): AdminAction {\n    return { type: AdminActionType.deleteCustomer, payload: id };\n}\n\nexport function getAllCompaniesAction(companies: Company[]): AdminAction {\n    return { type: AdminActionType.getAllCompanies, payload: companies };\n}\n\nexport function getAllCustomersAction(customers: Customer[]): AdminAction {\n    return { type: AdminActionType.getAllCustomers, payload: customers };\n}\n\nexport function updateCompanyAction(company: Company): AdminAction {\n    return { type: AdminActionType.updateCompany, payload: company };\n}\n\nexport function updateCustomerAction(customer: Customer): AdminAction {\n    return { type: AdminActionType.updateCustomer, payload: customer };\n}\nexport function getSingleComapnyAction(company:Company): AdminAction {\n    return{type: AdminActionType.singleCompany, payload:company};\n}\n\nexport function getSingleCustomerAction(customer: Customer): AdminAction{\n    return{type:AdminActionType.singleCustomer, payload:customer};\n}\n\nexport function AdminReducer(currentState: AdminState = new AdminState(), action: AdminAction): AdminState {\n    const newState = { ...currentState };\n    switch (action.type) {\n        case AdminActionType.addCompany:\n            newState.allCompanies = [...newState.allCompanies, action.payload];\n            break;\n        case AdminActionType.addCustomer:\n            newState.allCustomers = [...newState.allCustomers, action.payload];\n            break;\n        case AdminActionType.deleteCompany:\n            newState.allCompanies = [...newState.allCompanies].filter((item) => item.id !== action.payload);\n            break;\n        case AdminActionType.deleteCustomer:\n            newState.allCustomers = [...newState.allCustomers].filter((item) => item.id !== action.payload);\n            break;\n        case AdminActionType.updateCompany:\n            newState.allCompanies = newState.allCompanies.map((company) =>\n                company.id === action.payload.id ? { ...company, ...action.payload } : company\n            );\n            break;\n        case AdminActionType.updateCustomer:\n            newState.allCustomers = [...newState.allCustomers].filter((item) => item.id !== action.payload);\n            newState.allCustomers = [...newState.allCustomers, action.payload];\n            break;\n        case AdminActionType.getAllCompanies:\n            newState.allCompanies = action.payload;\n            break;\n        case AdminActionType.getAllCustomers:\n            newState.allCustomers = action.payload;\n            break;\n        case AdminActionType.singleCompany:\n            newState.company = action.payload;\n            break;\n        case AdminActionType.singleCustomer:\n            newState.customer = action.payload;\n            break;\n    }\n    return newState\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
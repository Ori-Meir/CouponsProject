{"ast":null,"code":"import { jwtDecode } from \"jwt-decode\";\nimport { loginAction } from \"../redux/authReducer\";\nimport { myStore } from \"../redux/Store\";\nexport const checkData = () => {\n  //check if the redux is not updated, and check if we can update it from the session storage\n  if (myStore.getState().auth.token.length < 10) {\n    //try to load it from the session storage\n    try {\n      const JWT = sessionStorage.getItem(\"jwt\").split(\" \")[1];\n      const decoded_jwt = jwtDecode(JWT);\n      console.log(decoded_jwt);\n      let myAuth = {\n        id: decoded_jwt.id,\n        name: decoded_jwt.userName,\n        email: decoded_jwt.sub,\n        token: JWT,\n        userType: decoded_jwt.userType,\n        isLogged: true\n      };\n      myStore.dispatch(loginAction(myAuth));\n    } catch {\n      return;\n    }\n  }\n};","map":{"version":3,"names":["jwtDecode","loginAction","myStore","checkData","getState","auth","token","length","JWT","sessionStorage","getItem","split","decoded_jwt","console","log","myAuth","id","name","userName","email","sub","userType","isLogged","dispatch"],"sources":["C:/Users/orime/IdeaProjects/Project_Ori_Meir/Frontend/src/util/chekData.ts"],"sourcesContent":["import { jwtDecode } from \"jwt-decode\";\n\nimport { loginAction } from \"../redux/authReducer\";\nimport { myStore } from \"../redux/Store\";\n\ntype jwtData = {\n    \"id\":number,\n    \"userType\": string,\n    \"userName\": string,\n    \"sub\": string,\n    \"iat\": number,\n    \"exp\": number\n}\n\nexport const checkData = () => {\n    //check if the redux is not updated, and check if we can update it from the session storage\n    if (myStore.getState().auth.token.length < 10) {\n        //try to load it from the session storage\n        try {\n            const JWT = sessionStorage.getItem(\"jwt\")!.split(\" \")[1];\n            const decoded_jwt = jwtDecode<jwtData>(JWT);\n            console.log(decoded_jwt);\n            let myAuth = {\n                id: decoded_jwt.id,\n                name: decoded_jwt.userName,\n                email: decoded_jwt.sub,\n                token: JWT,\n                userType: decoded_jwt.userType,\n                isLogged: true\n            };\n\n            myStore.dispatch(loginAction(myAuth))\n        } catch {\n            return;\n        }\n\n    }\n}"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AAEtC,SAASC,WAAW,QAAQ,sBAAsB;AAClD,SAASC,OAAO,QAAQ,gBAAgB;AAWxC,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAC3B;EACA,IAAID,OAAO,CAACE,QAAQ,CAAC,CAAC,CAACC,IAAI,CAACC,KAAK,CAACC,MAAM,GAAG,EAAE,EAAE;IAC3C;IACA,IAAI;MACA,MAAMC,GAAG,GAAGC,cAAc,CAACC,OAAO,CAAC,KAAK,CAAC,CAAEC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACxD,MAAMC,WAAW,GAAGZ,SAAS,CAAUQ,GAAG,CAAC;MAC3CK,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;MACxB,IAAIG,MAAM,GAAG;QACTC,EAAE,EAAEJ,WAAW,CAACI,EAAE;QAClBC,IAAI,EAAEL,WAAW,CAACM,QAAQ;QAC1BC,KAAK,EAAEP,WAAW,CAACQ,GAAG;QACtBd,KAAK,EAAEE,GAAG;QACVa,QAAQ,EAAET,WAAW,CAACS,QAAQ;QAC9BC,QAAQ,EAAE;MACd,CAAC;MAEDpB,OAAO,CAACqB,QAAQ,CAACtB,WAAW,CAACc,MAAM,CAAC,CAAC;IACzC,CAAC,CAAC,MAAM;MACJ;IACJ;EAEJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}